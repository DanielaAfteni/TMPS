package com.company.lab4;


//

public class Main {

    public static void main(String[] args) {
         TeamAntrenor teamAntrenor = new TeamAntrenor();
         // The main idea on which is based this laboratory work is a team that does sport
         // this team contains multiple players, which are characterized by:
         //                                                                 surname
         //                                                                 name
         //                                                                 role (in the team)
         //                                                                 state (if he is present or not at the training)
         //                                                                 mediator (he has with other team members the same management system, controlled by coach, trainer)

         // As we can see, below is represented how those team members, players are initialised and introduced in the team as constant players
         Jucator jucator1 = new TeamMember(teamAntrenor, "Pavlovschi", "Catalin", "atacator de rezerva");
         Jucator jucator2 = new TeamMember(teamAntrenor, "Melinte", "Alexandru", "atacator");
         Jucator jucator3 = new TeamMember(teamAntrenor, "Slobozianu", "Victor", "portar");
         Jucator jucator4 = new TeamMember(teamAntrenor, "Crocodel", "Dumitru", "persoana responsabila de echipament");
         Jucator jucator5 = new TeamMember(teamAntrenor, "Miricinschi", "Andrei", "atacator");
         teamAntrenor.inscriereaUnuiJucator(jucator1);
         teamAntrenor.inscriereaUnuiJucator(jucator2);
         teamAntrenor.inscriereaUnuiJucator(jucator3);
         teamAntrenor.inscriereaUnuiJucator(jucator4);
         teamAntrenor.inscriereaUnuiJucator(jucator5);

         // Due to the fact that these players are already assigned to a team, team trainer, they need to come for the trainings
         // In thia case, it is required to make use of the parameter - state, which will define if the user came or did not come to this training
         // At the training the team members should be present, so as to get the corresponding instructing and agreement from each other for the game that they are going to play.
         jucator4.aVenit();
         jucator5.aVenit();
         jucator1.aVenit();
         jucator2.aVenit();
         jucator5.aPlecat();
         jucator3.aVenit();
         for (Jucator jucator : teamAntrenor) {
              // Taking into account each player's state from the team, then we are going to print some lines about each of them if they are or not at the training
              // Those will contain member's: surname, name, role and state, depending on which he will get the instructing from others.
              System.out.println("Jucatorul " + jucator.getSurname() + " " + jucator.getName() +
                      " care este " + jucator.getRole() +
                      " este " + jucator.getState() + " la antrenamet.");
         }
         // After that we are going to make pieces of instructing that will be generated by some players having the same mediator
         // Those will be represented by an array of commands, consisting of commands from the jucator1 and jucator4
         // This list will send the instructing and realise them
         Command command = new TrimiteInstructajCommand(teamAntrenor, "Today we will exercise a lot. So be ready.", jucator1);
         Command command1 =  new TrimiteInstructajCommand(teamAntrenor, "The equipment is ready for usage, thus we can start.", jucator4);
         Command multipleCommands[] = new Command[2];
         multipleCommands[0] = command;
         multipleCommands[1] = command1;
         for (int i = 0; i < multipleCommands.length; i++) {
              // Depending on the state that the player has it will get the instructing
              // In case if he is present at the training then he will do,
              // otherwise he is not going to get it, because it is not possible for an absent person to get any
              // We are going to realise a different instructing changer for the list that contain commands
              InstructajChanger instructajChanger = new InstructajTextChanger();
              multipleCommands[i].setSuplimentarAntrenatJucator(instructajChanger);
              CommandInvoker commandInvoker = new CommandInvoker();
              commandInvoker.realizeazaInstructaj(multipleCommands[i]);
              System.out.println();
         }
    }
}